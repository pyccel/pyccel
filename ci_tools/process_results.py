""" Script to process the output of numpydoc validator"
"""
import argparse
import sys

parser = argparse.ArgumentParser(description='Process the output of numpydoc validator')
parser.add_argument('report', metavar='report', type=str,
                        help='Report generated by numpydoc validator')
parser.add_argument('summary', metavar='summary', type=str,
                        help='Github step summary')
args = parser.parse_args()

warning_codes = ['EX01', 'SA01']

errors = {}
warnings = {}
with open(args.report, 'r', encoding='utf-8') as f:
    for line in f:
        file_name, code, msg = line.split(':')
        if code in warning_codes:
            if file_name not in warnings:
                warnings[file_name] = [msg]
            else:
                warnings[file_name].append(msg)
        else:
            if file_name not in errors:
                errors[file_name] = [msg]
            else:
                errors[file_name].append(msg)

fail = len(errors) > 0

with open(args.summary, 'a', encoding='utf-8') as f:
    print('# Part 2 : Numpydoc Validation:', file=f)
    print(f'## {"FAILURE" if fail else "SUCCESS"}!', file=f)
    if fail:
        print('### ERRORS!', file=f)
    for file_name, errs in errors.items():
        print(f'#### {file_name}', file=f)
        print(''.join(f'- {err}' for err in errs), file=f)
    if (len(warnings) > 0):
        print('### WARNINGS!', file=f)
    for file_name, warns in warnings.items():
        print(f'#### {file_name}', file=f)
        print(''.join(f'- {warn}' for warn in warns), file=f)

sys.exit(fail)

