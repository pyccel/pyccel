# coding: utf-8
#------------------------------------------------------------------------------------------#
# This file is part of Pyccel which is released under MIT License. See the LICENSE file or #
# go to https://github.com/pyccel/pyccel/blob/devel/LICENSE for full license details.      #
#------------------------------------------------------------------------------------------#
""" Module containing scripts to run the unit tests of Pyccel
"""
import os
import subprocess
from argparse import ArgumentParser


def pyccel_test():
    """
    Run the unit tests of Pyccel.

    This function runs the unit tests of Pyccel using pytest.
    It first checks if pytest is installed, and if not, it
    installs it using pip. Then, it runs the tests using
    pytest and generates a coverage report. The function
    also checks if the tests are run in a virtual environment,
    and if so, it generates a coverage report for the virtual
    environment. Finally, it cleans up the temporary files
    generated during the test run.

    """

    import sys
    import importlib

    # Pyccel must be installed
    try:
        import pyccel
    except ImportError:
        print("pyccel is not installed. Please install pyccel before running the pyccel-test command.")
        raise

    # Find the path to the pyccel module
    # TODO: verify, improve
    pyccel_path = os.path.dirname(os.path.abspath(pyccel.__file__))

    # Find path to pyproject.toml from the installed pyccel
    # TODO: improve this
    pyproject_path = pyccel_path + '/../pyproject.toml'

    # Import tomllib for reading pyproject.toml
    if sys.version_info >= (3, 11):
        import tomllib
    else:
        import tomli as tomllib

    # Install the optional dependencies if not already installed
    # TODO: verify and improve
    with open(pyproject_path, 'rb') as f:
        pyproject_data = tomllib.load(f)
        packages = pyproject_data['project']['optional-dependencies']['test']
        packages_dict = {p.split()[0] : p for p in packages}
        # TODO: change name 'pytest-xdist' to 'xdist'
        # TODO: remove print
        print(packages_dict)
        for name, full in packages_dict.items():
            try:
                importlib.import_module(name)
            except ImportError:
                print(f"{name} is not installed. Installing {name}...")
                subprocess.run(['pip', 'install', full])

#    try:
#        import xdist
#    except ImportError:
#        print("pytest-xdist is not installed. Installing pytest_xdist...")
#        os.system('pip install pytest-xdist')
#        import xdist

#    subprocess.run(['curl', '-JLO', 'https://github.com/pyccel/pyccel/archive/refs/heads/devel.zip'])
#    subprocess.run(['unzip', '-o', 'pyccel-devel.zip'])

    # TODO: Determine the version of Pyccel that we are using

    # Download the test files
    # TODO: use the correct version of the test files
    from urllib.request import urlretrieve
    print("Downloading the test files from GitHub...")
    filepath = urlretrieve('https://github.com/pyccel/pyccel/archive/refs/heads/devel.zip', filename='pyccel.zip')

    # Unzip the test files
    import zipfile
    print("Unzipping the test files...")
    with zipfile.ZipFile('pyccel.zip', 'r') as archive:
        for file in archive.namelist():
            if file.startswith('pyccel-devel/tests'):
                archive.extract(file, path='.')

    # Change into the test directory
    print("Changing into the test directory...")
    os.chdir('pyccel-devel/tests')

    import pytest

    print("Run the single-process tests which must be run one at a time...")
    retcode = pytest.main(['-ra', '-m (not parallel and xdist_incompatible)'])
    print(f"refcode = {retcode}")

    print("Run the single-process tests which can be run in parallel...")
    retcode = pytest.main(['-ra', '-m (not parallel and not xdist_incompatible)', '-n', 'auto'])
    print(f"refcode = {retcode}")

#    return retcode


def pyccel_test_command():
    """
    Command line wrapper around the pyccel_test function.

    A wrapper around the pyccel_test function which allows
    command line arguments to be passed to the function.
    """
    parser = ArgumentParser(description='Tool for running the test suite of Pyccel')


#    parser.add_argument('folders', metavar='N', type=str, nargs='*',
#            help='The folders to be cleaned (default is the current folder')
#    parser.add_argument('-n', '--not-recursive', action='store_false',
#            help='Only run pyccel-clean in the current directory. Do not recurse into other folders')
#    parser.add_argument('-s', '--remove-libs', action='store_true',
#            help='Also remove any libraries generated by Python from the folder. Beware this may remove shared libraries generated by tools other than pyccel')

    args = parser.parse_args()

    pyccel_test()


if __name__ == "__main__":
    pyccel_test_command()
