// TODO: - linear:   improve using lists. see specs
//       - parallel: add if parallel

Openmp:
  statements*=OpenmpStmt
;

OpenmpStmt:
  '#$' 'omp' stmt=OmpConstructOrDirective
;

////////////////////////////////////////////////////
//         Constructs and Directives
////////////////////////////////////////////////////
OmpConstructOrDirective:
    OmpParallelConstruct
  | OmpLoopConstruct
  | OmpSingleConstruct
  | OmpEndClause
  | OmpCriticalConstruct
  | OmpBarrierConstruct
  | OmpMasterConstruct
  | OmpMaskedConstruct
  | OmpTaskLoopConstruct
  | OmpSimdConstruct
  | OmpAtomicConstruct
  | OmpTaskWaitConstruct
  | OmpTaskyieldConstruct
  | OmpTaskConstruct
  | OmpFlushConstruct
  | OmpCancelConstruct
  | OmpTargetConstruct
;
////////////////////////////////////////////////////

////////////////////////////////////////////////////
//     Constructs and Directives definitions
////////////////////////////////////////////////////
OmpParallelConstruct:   'parallel'      combined*=ParallelCombined? clauses*=OmpParallelClause;
OmpLoopConstruct:       'for'           clauses*=OmpLoopClause;
OmpTaskLoopConstruct:   'taskloop'      clauses*=OmpTaskLoopClause; // TODO: add IF and Final clauses when issue #590 is resolved.
OmpSingleConstruct:     'single'        clauses*=OmpSingleClause;
OmpCriticalConstruct:   'critical'      clauses*=OmpCriticalClause;
OmpMaskedConstruct:     name='masked'   clauses*=OmpMaskedClause;
OmpSimdConstruct:       name='simd'     clauses*=OmpSimdClause;
OmpAtomicConstruct:     name='atomic'   clauses*=AllOmpClauses; // Not all clause were added (cant test them).
OmpTaskConstruct:       'task'          clauses*=AllOmpClauses;
OmpCancelConstruct:     name='cancel'   clauses*=AllOmpClauses;
OmpTargetConstruct:     name='target'   clauses*=AllOmpClauses;
OmpBarrierConstruct:    name='barrier';
OmpMasterConstruct:     name='master';
OmpTaskWaitConstruct:   name='taskwait';
OmpTaskyieldConstruct:  name='taskyield';
OmpFlushConstruct:      name='flush'    clauses*=AllOmpClauses;
////////////////////////////////////////////////////

////////////////////////////////////////////////////
//         Combined Constructs
////////////////////////////////////////////////////
ParallelCombined: ('for' 'simd'? | 'sections');
////////////////////////////////////////////////////

////////////////////////////////////////////////////
//      Clauses for Constructs and Directives
////////////////////////////////////////////////////

AllOmpClauses:
    OmpAtomicClause
  | AtomicMemoryClause
  | OmpPriority
  | OmpDefault
  | OmpPrivate
  | OmpShared
  | OmpFirstPrivate
  | OmpUntied
  | OmpMergeable
  | OmpinReduction // Deprecated in OpenMP 5.0 for TaskLoop/Task Constructs
  | OmpDepend // TODO : depend-modifier, dependence-type: (source, sink)
  | FlushList
  | OmpCancelType
  | OmpLastPrivate
  | OmpMap
;

OmpParallelClause:
    OmpNumThread
  | OmpDefault
  | OmpPrivate
  | OmpShared
  | OmpFirstPrivate
  | OmpCopyin
  | OmpReduction
  | OmpProcBind
;

OmpLoopClause:
    OmpPrivate
  | OmpFirstPrivate
  | OmpLastPrivate
  | OmpLinear
  | OmpReduction
  | OmpSchedule
  | OmpCollapse
  | OmpOrdered
;

OmpTaskLoopClause:
    OmpShared
  | OmpPrivate
  | OmpFirstPrivate
  | OmpLastPrivate
  | OmpReduction
  | OmpinReduction // Deprecated in OpenMP 5.0 for TaskLoop Construct
  | OmpNumTasks
  | OmpGrainSize
  | OmpCollapse
  | OmpUntied
  | OmpMergeable
  | OmpNogroup
  | OmpPriority
;

OmpSingleClause:
    OmpPrivate
  | OmpFirstPrivate
;

OmpCriticalClause:
    OmpCriticalName
;

OmpMaskedClause:
    OmpFilter
;

OmpSimdClause:
    OmpLinear
  | OmpReduction
  | OmpCollapse
  | OmpLastPrivate
;

////////////////////////////////////////////////////

////////////////////////////////////////////////////
//              Clauses definitions
////////////////////////////////////////////////////
OmpNumThread: 'num_threads' '(' thread=ThreadIndex ')';
OmpNumTasks: 'num_tasks' '(' tasks=TaskIndex ')';
OmpGrainSize: 'grainsize' '(' tasks=TaskIndex ')';
OmpDefault: 'default' '(' status=OmpDefaultStatus ')';
OmpProcBind: 'proc_bind' '(' status=OmpProcBindStatus ')';
OmpMap: 'map' '(' mtype=OmpMapType? args+=ID[','] ')';
OmpPrivate: 'private' '(' args+=ID[','] ')';
OmpShared: 'shared' '(' args+=ID[','] ')';
OmpFirstPrivate: 'firstprivate' '(' args+=ID[','] ')';
OmpLastPrivate: 'lastprivate' '(' args+=ID[','] ')';
OmpCopyin: 'copyin' '(' args+=ID[','] ')';
OmpDepend: 'depend' '('dtype=OmpDependenceType ':' args+=ID[','] ')';
OmpReduction: 'reduction' '('op=OmpReductionOperator ':' args+=ID[','] ')';
OmpinReduction: ctype='in_reduction' '('op=OmpReductionOperator ':' args+=ID[','] ')';
OmpCollapse: 'collapse' '(' n=INT ')';
OmpLinear: 'linear' '(' val=ID ':' step=INT ')';
OmpOrdered: 'ordered' ('(' n=INT ')')?;
OmpSchedule: 'schedule' '(' kind=OmpScheduleKind (',' chunk_size=INT)? ')';
OmpEndClause: 'end' construct=OpenmpConstructs (simd='simd')? (nowait='nowait')?;
OmpCriticalName: '(' args=ID ')';
OmpFilter: name='filter' '(' n=INT ')';
OmpPriority: name='priority' '(' n=INT ')';
OmpUntied: name='untied';
OmpMergeable: name='mergeable';
OmpNogroup: name='nogroup';
OmpAtomicClause: name=AtomicClause;
AtomicMemoryClause: name=AtomicMClause;
FlushList: '(' args+=ID[','] ')';
OmpCancelType: name=CancelType;
////////////////////////////////////////////////////

////////////////////////////////////////////////////
CancelType: ('parallel' | 'sections' | 'taskgroup' | 'for');
OmpScheduleKind: ('static' | 'dynamic' | 'guided' | 'auto' | 'runtime' );
OmpProcBindStatus: ('master' | 'close' | 'spread');
OmpReductionOperator: ('+' | '-' | '*' | '/');
OmpDependenceType: ('in' | 'out' | 'inout' | 'mutexinoutset' | 'depobj');
OmpDefaultStatus: ('private' | 'firstprivate' | 'shared' | 'none');
OmpMapType: ('always' | 'close' | ('mapper' '(' ID ')') ',')? ('to' | 'from' | 'tofrom' | 'alloc' | 'release' | 'delete') ':';
OpenmpConstructs: ('simd' | 'masked' | 'master' | 'single' | 'parallel' | 'for' | 'critical' ('(' ID  ')')? | 'task' | 'target');

AtomicClause: ('write' | 'read' | 'update' | 'capture' | 'compare' | 'weak');
AtomicMClause: ('seq_cst' | 'acq_rel' | 'release' | 'acquire' | 'relaxed');
ThreadIndex: (ID | INT);
TaskIndex: (ID | INT);
NotaStmt: /.*$/;
////////////////////////////////////////////////////
