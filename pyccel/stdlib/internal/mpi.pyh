# pyccel header for MPI.
#

# On travis, 'use mpi, only: mpi_allgather' is not working
# for this reason, we will ignore all imports 
# and tell pyccel to add 'use mpi' using import_all

#$ header metavar module_name='mpi'
#$ header metavar module_version='3.1'
#$ header metavar ignore_at_import=True
#$ header metavar import_all=True
#$ header metavar save=True
#$ header metavar external=False
#

# ............................................................
#            MPI Constants
# ............................................................

#$ header variable mpi_comm_world  int32
#$ header variable mpi_status_size int32
#$ header variable mpi_proc_null   int32

#$ header variable MPI_LOGICAL     int32
#$ header variable MPI_INTEGER     int32
#$ header variable MPI_INTEGER8    int32
#$ header variable MPI_REAL4       int32
#$ header variable MPI_REAL8       int32
#$ header variable MPI_COMPLEX8    int32
#$ header variable MPI_COMPLEX16   int32
#$ header variable MPI_CHARACTER   int32
                                 
#$ header variable MPI_SUM         int32
#$ header variable MPI_PROD        int32
#$ header variable MPI_MAX         int32
#$ header variable MPI_MIN         int32
#$ header variable MPI_MAXLOC      int32
#$ header variable MPI_MINLOC      int32
#$ header variable MPI_LAND        int32
#$ header variable MPI_LOR         int32
#$ header variable MPI_LXOR        int32

# ............................................................

# ............................................................
#            
# ............................................................

#$ header function mpi_init (int32)
#$ header function mpi_finalize (int32)
#$ header function mpi_abort (int32, int32, int32)

# ............................................................

# ............................................................
#          Communicator Accessors
# ............................................................

#$ header function mpi_comm_size (int32, int32, int32)
#$ header function mpi_comm_rank (int32, int32, int32)

# ............................................................
 
# ............................................................
#          Point-to-Point Communication
# ............................................................

#$ header function mpi_recv (*, int32, int32, int32, int32, int32, int32 [:], int32)
#$ header function mpi_send (*, int32, int32, int32, int32, int32, int32)
#$ header function mpi_ssend (*, int32, int32, int32, int32, int32, int32)
#$ header function mpi_bsend (*, int32, int32, int32, int32, int32, int32)
#$ header function mpi_buffer_attach(*, int32, int32)
#$ header function mpi_buffer_dettach(*, int32, int32)

#$ header function mpi_irecv (*, int32, int32, int32, int32, int32, int32, int32)
#$ header function mpi_isend (*, int32, int32, int32, int32, int32, int32, int32)
#$ header function mpi_issend (*, int32, int32, int32, int32, int32, int32, int32)
#$ header function mpi_ibsend (*, int32, int32, int32, int32, int32, int32, int32)

#$ header function mpi_sendrecv (*, int32, int32, int32, int32, *, int32,int32, int32, int32, int32, int32 [:], int32)
#$ header function mpi_sendrecv_replace (*, int32, int32, int32, int32, int32, int32, int32, int32 [:], int32)

#$ header function mpi_barrier (int32, int32)
#$ header function mpi_bcast (*, int32, int32, int32, int32, int32)
#$ header function mpi_scatter (*, int32, int32, *, int32, int32, int32, int32, int32)
#$ header function mpi_gather (*, int32, int32, *, int32, int32, int32, int32, int32)
#$ header function mpi_allgather (*, int32, int32, *, int32, int32, int32, int32)
#$ header function mpi_allgatherv (*, int32, int32, *, int32[:], int32[:], int32, int32)
#$ header function mpi_gatherv(*, int32, int32, *, int32 [:], int32 [:], int32, int32, int32, int32)
#$ header function mpi_alltoall (*, int32, int32, *, int32, int32, int32, int32)

#$ header function mpi_reduce (*, *, int32, int32, int32, int32, int32, int32)
#$ header function mpi_allreduce (*, *, int32, int32, int32, int32, int32)

#$ header function mpi_wait (int32, int32 [:], int32)
#$ header function mpi_waitall (int32, int32 [:], int32 [:,:], int32)
#$ header function mpi_waitany (int32, int32 [:], int32, int32 [:], int32)
#$ header function mpi_waitsome (int32, int32 [:], int32, int32 [:], int32 [:,:], int32)

#$ header function mpi_test (int32, bool, int32 [:], int32)
#$ header function mpi_testall (int32, bool, int32 [:], int32 [:,:], int32)
#$ header function mpi_testany (int32, int32 [:], int32, bool, int32 [:], int32)
#$ header function mpi_testsome (int32, int32 [:], int32, int32 [:], int32 [:,:], int32)

#$ header function mpi_comm_split (int32, int32, int32, int32, int32)
#$ header function mpi_comm_free (int32, int32)

#$ header function mpi_cart_create (int32, int32, int32 [:], int32 [:], bool, int32, int32)
#$ header function mpi_cart_coords (int32, int32, int32, int32 [:], int32)
#$ header function mpi_cart_shift (int32, int32, int32, int32, int32, int32)
#$ header function mpi_cart_sub (int32, int32 [:], int32, int32)

#$ header function mpi_dims_create (int32, int32, int32 [:], int32)

# ............................................................

# ............................................................
#          Derived datatypes
# ............................................................

#$ header function mpi_type_contiguous (int32, int32, int32, int32)
#$ header function mpi_type_vector (int32, int32, int32, int32, int32, int32)
#$ header function mpi_type_commit (int32, int32)
#$ header function mpi_type_free (int32, int32)

#$ header function mpi_type_indexed (int32, int32 [:], int32 [:], int32, int32, int32)
#$ header function mpi_type_create_subarray (int32, int32 [:], int32 [:], int32 [:], int32, int32, int32, int32)

# ............................................................
