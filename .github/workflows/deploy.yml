name: Deploy new version to PyPi

on:
  workflow_run:
    workflows: [Anaconda-Windows]
    types:
      - completed

jobs:
  waitForWorklows:
    name: Wait for workflows
    runs-on: ubuntu-latest
    if: github.event.workflow_run.head_branch == 'main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install python dependencies
        run: |
          python -m pip install requests jwt
      - name: Wait for workflows
        run: |
          python3 wait_for_main_workflows.py
        working-directory: ./ci_tools
        shell: bash
        env:
          COMMIT: ${{ github.event.workflow_run.head_sha }}

  deployVersion:
    runs-on: ubuntu-latest
    needs: [waitForWorklows]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: main
      - name: Install dependencies
        uses: ./.github/actions/linux_install
      - name: Update build
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build
          python -m pip install --upgrade twine
      - name: Build and deploy
        run: |
          echo ${{ github.event.workflow_run.head_branch }}
          python3 -m build
          ls dist/*
          python3 -m twine upload --repository pypi dist/* --non-interactive
        shell: bash
        env:
          TWINE_USERNAME: '__token__'
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      - name: Install Pyccel without tests
        run: |
          python -m pip install .
      - name: "Get tag name"
        id: tag_name
        run: |
          version=$(python -c "from pyccel import __version__; print(__version__)")
          echo "TAG_NAME=v${version}" >> $GITHUB_OUTPUT
      - name: "Get release notes"
        id: release_notes
        run: |
          START_LINE=$(grep "^## " CHANGELOG.md -n | head -1 | cut -d: -f -1)
          END_LINE=$(grep "^## " CHANGELOG.md -n | head -2 | tail -1 | cut -d: -f -1)
          START_LINE=$((${START_LINE}+1))
          END_LINE=$((${END_LINE}-1))
          sed -n ${START_LINE},${END_LINE}p CHANGELOG.md > release_notes.md
      - name: "Update repo tags"
        uses: EndBug/latest-tag@latest
        with:
          ref: ${{ steps.tag_name.outputs.TAG_NAME }}
      - name: "Update releases"
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/pyccel/pyccel/releases \
             -f "tag_name=${tag_name}" -f "name=${tag_name}" -F "body=@release_notes.md" -F "draft=false" -F "prerelease=false" -F "generate_release_notes=false"
        env:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          release_notes: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          GH_TOKEN: ${{ github.token }}

