name: Linux unit tests run through the 'pyccel-test' command

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
      ref:
        required: false
        type: string
      check_run_id:
        required: false
        type: string
      pr_repo:
        required: false
        type: string
  push:
    branches: [devel, main]
  pull_request:
    branches: [devel]

env:
  COMMIT: ${{ inputs.ref || github.event.ref }}
  PEM: ${{ secrets.BOT_PEM }}
  GITHUB_RUN_ID: ${{ github.run_id }}
  GITHUB_CHECK_RUN_ID: ${{ inputs.check_run_id }}
  PR_REPO: ${{ inputs.pr_repo || github.repository }}

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || github.repository == 'pyccel/pyccel'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: push-matrix
      if: github.event_name == 'push'
      run: |
        echo "matrix=['3.9', '3.10', '3.11', '3.12', '3.13']" >> $GITHUB_ENV
      shell: bash
    - id: pull-matrix
      if: github.event_name == 'pull_request'
      run: |
        echo "matrix=['3.9', '3.13']" >> $GITHUB_ENV
      shell: bash
    - id: dispatch-matrix
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "matrix=[${{ inputs.python_version }}]" >> $GITHUB_ENV
      shell: bash
    - id: set-matrix
      run: |
        echo "$matrix"
        echo "matrix={\"python_version\": $matrix}" >> $GITHUB_OUTPUT
      shell: bash

  Linux:

    runs-on: ubuntu-latest
    name: Unit tests
    needs: matrix_prep
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}

    steps:
      - id: duplicate_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          skip_after_successful_duplicate: 'true'
          paths: '["pyccel/**/*.py", "tests/**/*.py"]'
          paths_ignore: '["pyccel/version.py"]'
          do_not_skip: '["push"]'

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.COMMIT }}
          repository: ${{ env.PR_REPO }}
          submodules: true
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      - name: "Setup"
        if: github.event_name != 'push'
        id: token
        run: |
          pip install jwt requests
      - name: Install dependencies
        if: steps.duplicate_check.outputs.should_skip != 'true'
        uses: ./.github/actions/linux_install
      - name: Install Pyccel with tests
        if: steps.duplicate_check.outputs.should_skip != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[test]
        shell: bash
      - name: Run tests with the pyccel-test command
        if: steps.duplicate_check.outputs.should_skip != 'true'
        id: pyccel-test
        timeout-minutes: 60
        run: |
          pyccel-test
        shell: bash
