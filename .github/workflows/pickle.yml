name: Pickled-installation

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
      ref:
        required: false
        type: string
      editable_string:
        required: false
        type: string
      check_run_id:
        required: false
        type: string
      pr_repo:
        required: false
        type: string
  push:
    branches: devel

env:
  COMMIT: ${{ inputs.ref || github.event.ref }}
  PEM: ${{ secrets.BOT_PEM }}
  GITHUB_RUN_ID: ${{ github.run_id }}
  GITHUB_CHECK_RUN_ID: ${{ inputs.check_run_id }}
  PR_REPO: ${{ inputs.pr_repo || github.repository }}

jobs:
  Python_version_picker:
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || github.repository == 'pyccel/pyccel'
    outputs:
      python_version: ${{ steps.set-matrix.outputs.python_version }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - if: github.event_name == 'push'
      run: |
        echo "version=3.9" >> $GITHUB_ENV
        echo "editable=['-e', ' ']" >> $GITHUB_ENV
      shell: bash
    - id: dispatch-matrix
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "version=${{ inputs.python_version }}" >> $GITHUB_ENV
        echo "editable=['${{ inputs.editable_string }}']" >> $GITHUB_ENV
      shell: bash
    - id: set-matrix
      run: |
        echo "python_version=$version" >> $GITHUB_OUTPUT
        echo "matrix={\"editable_string\": $editable}" >> $GITHUB_OUTPUT
      shell: bash

  Pickled-installation:
    runs-on: ubuntu-latest
    name: Deploy tests
    needs: Python_version_picker

    strategy:
      matrix: ${{fromJson(needs.Python_version_picker.outputs.matrix)}}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.COMMIT }}
          repository: ${{ env.PR_REPO }}
      - name: Set up Python ${{ needs.Python_version_picker.outputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.Python_version_picker.outputs.python_version }}
      - name: "Setup"
        id: token
        run: |
          pip install jwt requests
          python ci_tools/setup_check_run.py pickle
      - name: Install dependencies
        uses: ./.github/actions/linux_install
      - name: Install Pyccel
        id: pickle
        run: |
          python -m pip install --upgrade pip
          echo "python -m pip install ${{ matrix.editable_string }} ."
          python -m pip install ${{ matrix.editable_string }} .
        shell: bash
      - name: Check for existence of pickled files
        id: pickle_check
        uses: ./.github/actions/check_for_pickled
      - name: "Post completed"
        if: always()
        run: |
          python ci_tools/basic_json_check_output.py --statuses ${{ steps.pickle.outcome }} ${{ steps.pickle_check.outcome }} --reasons "Installation failed." "Pickled files were not found in installaion."
          python ci_tools/complete_check_run.py ${{ steps.pickle.outcome }} ${{ steps.pickle_check.outcome }}
