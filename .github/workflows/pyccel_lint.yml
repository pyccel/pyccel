name: Pyccel Linting

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
      ref:
        required: false
        type: string
      base:
        required: true
        type: string
      check_run_id:
        required: false
        type: string
      pr_repo:
        required: false
        type: string

env:
  COMMIT: ${{ inputs.ref || github.event.ref }}
  PEM: ${{ secrets.BOT_PEM }}
  GITHUB_RUN_ID: ${{ github.run_id }}
  GITHUB_CHECK_RUN_ID: ${{ inputs.check_run_id }}
  PR_REPO: ${{ inputs.pr_repo || github.repository }}

jobs:
  Pyccel-Linter:
    runs-on: ubuntu-latest
    name: Best practices

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.COMMIT }}
          repository: ${{ env.PR_REPO }}
          fetch-depth: 0
      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}
      - name: "Setup"
        id: token
        run: |
          pip install jwt requests
          python ci_tools/setup_check_run.py pyccel_lint
      - name: Install dependencies
        uses: ./.github/actions/linux_install
      - name: Install Pyccel
        run: |
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install pylint
        shell: bash
      - name: Collect diff information
        run: |
          git diff ${{ inputs.base }} --no-indent-heuristic --unified=0 --output=pull_diff.txt --no-color
        shell: bash
      - name: Lint
        id: lint
        run: |
          python ci_tools/check_slots.py $GITHUB_STEP_SUMMARY
          python ci_tools/check_pylint_commands.py . pull_diff.txt $GITHUB_STEP_SUMMARY
          cat $GITHUB_STEP_SUMMARY
        shell: bash
      - name: "Post completed"
        if: always()
        run:
          python ci_tools/complete_check_run.py ${{ steps.lint.outcome }}
