name: 'Pyccel pytest commands generating fortran or c'
inputs:
  shell_cmd:
    description: 'Specifies the shell command (different for anaconda)'
    required: false
    default: 'bash'
  pytest_mark:
    description: 'Mark expression to exclude additional tests'
    required: false
    default: ''


runs:
  using: "composite"
  steps:
    - name: Test with pytest
      run: |
        which python
        if [ -n "${{ runner.debug }}" ]
        then
          # If running in debug mode
          export "DEBUG=1"
          export FLAGS="-xsv --log-cli-level DEBUG"
        else
          export FLAGS=""
        fi
        python -m pytest -n auto -rXx ${FLAGS} -m "not (parallel or xdist_incompatible) and c ${{ inputs.pytest_mark }}" --ignore=symbolic --ignore=ndarrays
        if [ -n "${SITE_DIR}" ]; then
            echo "Touching"
            # Test ndarray folder update (requires parallel tests to avoid clean)
            touch ${SITE_DIR}/pyccel/stdlib/cwrapper/cwrapper.h
            python -m pytest -n auto -rXx ${FLAGS} -m c -k test_array_int32_1d_scalar epyccel/test_arrays.py
        fi
        python -m pytest -rXx ${FLAGS} -m "xdist_incompatible and not parallel and c ${{ inputs.pytest_mark }}" --ignore=symbolic --ignore=ndarrays
        pyccel-clean
        python -m pytest -n auto -rXx ${FLAGS} -m "not (parallel or xdist_incompatible) and not (c or python) ${{ inputs.pytest_mark }}" --ignore=symbolic --ignore=ndarrays
        python -m pytest -rXx ${FLAGS} -m "xdist_incompatible and not parallel and not (c or python) ${{ inputs.pytest_mark }}" --ignore=symbolic --ignore=ndarrays
        pyccel-clean
        python -m pytest ndarrays/ -rXx ${FLAGS}
        pyccel-clean
      shell: ${{ inputs.shell_cmd }}
      working-directory: ./tests
