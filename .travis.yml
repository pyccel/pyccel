# After changing this file, check it on:
#   http://lint.travis-ci.org/

#==============================================================================
# Defaults for Linux
#==============================================================================

os: linux
dist: xenial
language: python
env: PYTHON=python

before_install:
  - sudo apt-get install gfortran
  - sudo apt-get install libblas-dev liblapack-dev
  - sudo apt-get install libopenmpi-dev openmpi-bin

install:
  - ${PYTHON} -m pip install .
  - ${PYTHON} -m pip install scipy
  - ${PYTHON} -m pip install mpi4py
  - ${PYTHON} -m pip install "pytest>=4.5"

before_script:  # Coverage instructions - setup
  - ${PYTHON} -m pip install coverage
  - sudo apt-get install default-jre
  - INSTALL_DIR=$(cd tests; ${PYTHON} -c "import pyccel; print(pyccel.__path__[0])")
  - SITE_DIR=$(${PYTHON} -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])')
  - echo -e "import coverage; coverage.process_startup()" > ${SITE_DIR}/pyccel_cov.pth
  - echo -e "[run]\nparallel = True\nsource = ${INSTALL_DIR}\ndata_file = $(pwd)/.coverage\n[report]\ninclude = ${INSTALL_DIR}/*\n[xml]\noutput = cobertura.xml" > .coveragerc
  - export COVERAGE_PROCESS_START=$(pwd)/.coveragerc

script:
  - cd tests
  - ${PYTHON} -m pytest -rx -m "not parallel and c" --ignore=ast --ignore=printers --ignore=symbolic
  - ${PYTHON} -m pytest -rx -m "not parallel and not c" --ignore=ast --ignore=printers --ignore=symbolic
  - mpiexec -n 4 ${MPI_OPTS} ${PYTHON} -m pytest epyccel/test_epyccel_mpi_modules.py -v -m parallel -rx
#  - mpiexec -n 4 ${MPI_OPTS} ${PYTHON} -m pytest epyccel -v -m parallel -rx
  - cd ..

after_script:  # Coverage instructions - collections
  - coverage combine
  - coverage xml
  - rm ${SITE_DIR}/pyccel_cov.pth
  - bash <(wget -q -O - https://coverage.codacy.com/get.sh)

cache:
  directories:
    - /usr/local/Homebrew/
    - $HOME/Library/Caches/Homebrew/

#==============================================================================
# Job matrix (including Windows build)
#==============================================================================

jobs:
  include:

  - os: linux
    python: 3.5

  - os: linux
    python: 3.6

  - os: linux
    python: 3.7

  - os: linux
    python: 3.8

  - os: osx
    language: c  #'language: python' is an error on Travis CI macOS
    env: PYTHON=python3 MPI_OPTS="--oversubscribe"
    before_install:
      - brew update
      # Avoid upgrade of useless packages that depend on open-mpi
      # We only let upgrading: hdf5 netcdf numpy openblas python3
      - brew pin ansible cairo cgal gdal geos glib gnupg gnutls libdap
      - brew pin libpq libxml2 libspatialite libssh mercurial nettle
      - brew pin poppler postgis postgresql pyenv sfcgal unbound
#      - brew install gcc openblas lapack
      - brew install open-mpi
    before_script: null
    after_script : null
    before_cache:
      - brew cleanup

  - os: windows
    language: c  # Python not supported, "language: generic" doesn't start VM
    before_install:
      - choco install anaconda3
      - source /c/tools/Anaconda3/etc/profile.d/conda.sh
#      - source .travis/RefreshEnv.sh
      - conda activate
      #
      # Change default C compiler from M$ to mingw in distutils.cfg
      - echo -e "[build]\ncompiler = mingw32" >> /c/tools/Anaconda3/Lib/distutils/distutils.cfg
      #
      # Download x64 BLAS and LAPACK DLLs from https://icl.cs.utk.edu/lapack-for-windows/lapack/
      - WEB_ADDRESS=https://icl.cs.utk.edu/lapack-for-windows/libraries/VisualStudio/3.7.0/Dynamic-MINGW/Win64
      - LIBRARY_DIR=/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/lib
      - curl $WEB_ADDRESS/libblas.dll -o $LIBRARY_DIR/libblas.dll
      - curl $WEB_ADDRESS/liblapack.dll -o $LIBRARY_DIR/liblapack.dll
      #
      # Microsoft C runtime library: generate static libmsvcr140.a from vcruntime140.dll
      - cd "$LIBRARY_DIR"
      - cp $SYSTEMROOT/SysWOW64/vcruntime140.dll .
      - gendef vcruntime140.dll
      - dlltool -d vcruntime140.def -l libmsvcr140.a -D vcruntime140.dll
      - cd -
      #
      # Download MS MPI runtime and SDK
      - curl -L https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe -o msmpisetup.exe
      - curl -L https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisdk.msi -o msmpisdk.msi
      #
      # Install MS MPI
      - ./msmpisetup.exe -unattend
      - sleep 5
      - msiexec //quiet //i msmpisdk.msi
#      - refreshenv
      - export MSMPI_INC="C:\\Program Files (x86)\\Microsoft SDKs\\MPI\\Include\\"
      - export MSMPI_LIB64="C:\\Program Files (x86)\\Microsoft SDKs\\MPI\\Lib\\x64\\"
      - export PATH=$PATH:"C:\\Program Files\\Microsoft MPI\\Bin"
      #
      # Generate mpi.mod for gfortran according to https://abhilashreddy.com/writing/3/mpi_instructions.html
      - cd "$MSMPI_INC"
      - sed -i 's/mpifptr.h/x64\/mpifptr.h/g' mpi.f90
      - sed -i 's/mpifptr.h/x64\/mpifptr.h/g' mpif.h
      - gfortran -c -D_WIN64 -D INT_PTR_KIND\(\)=8 -fno-range-check mpi.f90
      - cd -
      #
      # Generate static libmsmpi.a from msmpi.dll
      - cd "$MSMPI_LIB64"
      - cp $SYSTEMROOT/SysWOW64/msmpi.dll .
      - gendef msmpi.dll
      - dlltool -d msmpi.def -l libmsmpi.a -D msmpi.dll
      - cd -

    before_script:
      # Call f2py once (it will fail) to clear some cache
      - echo -e "subroutine foo()\nend subroutine\n" > faily.f90
      - ${PYTHON} -m numpy.f2py -c -m faily faily.f90 || true
      - rm faily.f90

    after_script : null
